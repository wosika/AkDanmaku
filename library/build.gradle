apply from: rootProject.file('gradle/library.gradle')
//apply from: rootProject.file('gradle/mavenCentral-publish.gradle')

configurations { natives }

android {
    defaultConfig {
        versionCode 1
        versionName "1.0"
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['jniLibs']
        }
    }

    compileOptions {
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    // LibGdx-Core
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    // LibGdx-Android
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
    // LibGdx-Box2d
    // implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    // natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
    // natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
    // natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
    // natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
    // LibGdx-Ashley(ECS)
    implementation "com.badlogicgames.ashley:ashley:$ashleyVersion"


    implementation 'androidx.core:core-ktx:1.6.0'




}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper jniLibs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("jniLibs/armeabi/").mkdirs()
        file("jniLibs/armeabi-v7a/").mkdirs()
        file("jniLibs/arm64-v8a/").mkdirs()
        file("jniLibs/x86_64/").mkdirs()
        file("jniLibs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("jniLibs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("jniLibs/armeabi-v7a")
            if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("jniLibs/armeabi")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("jniLibs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("jniLibs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

